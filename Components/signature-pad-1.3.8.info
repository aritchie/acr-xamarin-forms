{"Name":"Signature Pad","Id":1809,"Alias":"signature-pad","Description":"Signature Pad makes capturing, saving, exporting, and displaying\nsignatures extremely simple.\n\nAdding a `SignaturePadView` to your iOS app:\n\n```csharp\nusing SignaturePad;\n...\n\npublic override void ViewDidLoad ()\n{\n\t...\n\tvar signature = new SignaturePadView (View.Frame);\n\tView.AddSubview (signature);\n}\n```\n\nAdding a `SignaturePadView` to your Android app:\n\n```csharp\nusing SignaturePad;\n...\n\nprotected override void OnCreate (Bundle bundle)\n{\n\tbase.OnCreate (bundle);\n\n\tvar signature = new SignaturePadView (this);\n\tAddContentView (signature,\n\t\tnew ViewGroup.LayoutParams (ViewGroup.LayoutParams.FillParent, ViewGroup.LayoutParams.FillParent));\n}\n```\n\nTo capture the user\u0027s signature as an image:\n\n```csharp\nvar image = signature.GetImage ();\n```\n\nCustomization\n-------------\n\nYou can change some of the positioning, colors, fonts and the background image of the SignaturePad\nusing a few interfaces that the control provides and standard techniques provided by the platform.\n\n### SignaturePad customization interface\n\nThe class for both iOS and Android expose some of its internal elements to allow text, font, color and positioning manipulation from your code:\n\n`StrokeColor` Sets the color of the signature input.\n\n`StrokeWidth` Sets the width of the signature input.\n\n`BackgroundColor` Sets the color for the whole signature pad.\n\n`SignatureLineColor` The color of the horizontal line.\n\n`SignaturePrompt` The text label containing the symbol or text that goes under the horizontal line (Default \"X\").\n\n`Caption` The text label that goes under the horizontal line.\n\n`SignatureLine` The view that is used to render the horizontal line.\n\n`ClearLabel` The view that when clicked clears the pad.\n\n`BackgroundImageView` An optional image rendered below the input strokes that can be used as a texture, logo or watermark.\n\n### iOS customization tips\n\nCheck the sample for ideas on how to manipulate the layout to get the desired effects and color.\n\nYou can alter the subviews Frames or if you are targeting above iOS 6, use Auto-layout constraints to reposition elments within the pad. For coloring, reasign properties such as BackgroundColor (including UIColor.Clear for a transparent view).\n\nBackgroundImageView cannot be set, but its Image member can, so you can assign a bitmap pulled from a resource or wherever you may get its data. Change the Alpha to make it semi-transparent to get a watermark effect or create a texture using a bitmap with the same dimensions as the pad.\n\nIf you don\u0027t want the SignaturePrompt, the Caption or the SignatureLine to appear inside your pad, just assign\ntheir Hidden property to true.\n\nSignaturePad.Layer can be manipulated to generate or remove the shadow from the control or alter its thickness or roundness.\n\n### Android customization tips\n\nCheck the sample for ideas on how to manipulate the layout to get the desired effects and color.\n\nUnder Android, the control inherits from RelativeLayout, which provides a good amount of flexibility for repositioning of the child views within the pad. Assign for the children the LayoutParameters property with new RelativeLayout.LayoutParams to move the elements around or resize them using relative positioning policies. All of the elements within the pad have Ids already set so you can establish relative positions between them easily.\n\nBackgroundImageView cannot be set, but you can assign it new data using the SetImage* methods and then aler it with SetAlpha to make it semi-transparent and get a watermark effect or create a texture effect (remember to resize it to the full extent of its parent, the SignaturePad).\n\nIf you don\u0027t want the SignaturePrompt, the Caption or the SignatureLine to appear inside your pad, just assign\ntheir Visibility property to ViewStates.Invisible.\n\n*Screenshot created with [PlaceIt](http://placeit.breezi.com).*\n","Version":"1.3.8","Summary":"Makes capturing, saving, and displaying signatures extremely simple.","QuickStart":"Signature Pad makes capturing, saving, exporting, and displaying\nsignatures extremely simple.\n\n## Examples\n\n### Displaying a signature pad\n\nOn iOS:\n\n```csharp\nusing SignaturePad;\n...\n\npublic override void ViewDidLoad ()\n{\n\t...\n\tvar signature = new SignaturePadView (View.Frame) {\n\t\tLineWidth = 3f\n\t};\n\tView.AddSubview (signature);\n}\n```\n\nOn Android:\n\n```csharp\nusing SignaturePad;\n...\n\nprotected override void OnCreate (Bundle bundle)\n{\n\tbase.OnCreate (bundle);\n\n\tvar signature = new SignaturePadView (this) {\n\t\tLineWidth = 3f\n\t};\n\tAddContentView (signature,\n\t\tnew ViewGroup.LayoutParams (ViewGroup.LayoutParams.FillParent, ViewGroup.LayoutParams.FillParent));\n}\n```\n\n### Getting the signature as an image\n\n```csharp\n// on iOS:\nUIImage image = signature.GetImage ();\n\n// on Android:\nBitmap image = signature.GetImage ();\n```\n\n### Getting the signature as a point array\n\n```csharp\n// Discontinuous lines are separated by PointF.Empty\nPointF[] points = signature.Points;\n```\n\n### Loading a signature from a point array\n\n```csharp\nsignature.LoadPoints (points);\n```\n","Hash":"2b8de02e9c7815102c5cd5adf2fdbf32","TargetPlatforms":["ios","android"],"TrialHash":null}